# Initialization script which finds images on Flickr.
# The initial image is based on user input. Thereafter,
# the images are found based on random words being
# generated by a Processing sub-system. The Processing
# sub-system processes the image that was before
# downloaded and returns a random word. This recursive
# procedure goes infinitely.

import sys
import argparse
import os
import startexe
import time
from pathlib import Path
import keyboard
from flickrapi import FlickrAPI
import urllib.request


key = "fb0352a263e142ec5cd9b2845ed2470b"
secret = "4f6486ee2d6d0acb"

SAVE_FOLDER = "images"
TEMP_FOLDER = "temp_image"

iterations = 1
searchTerm = ""
newWord = ""


def main():
    # Create two folders for the images (if they don't already exist)
    if not os.path.exists(SAVE_FOLDER):
        os.mkdir(SAVE_FOLDER)

    if not os.path.exists(TEMP_FOLDER):
        os.mkdir(TEMP_FOLDER)

    # Start the program
    startRecursion()


def startRecursion():
    global iterations

    # Infinite loop of iterations so the program keeps running
    while True:
        setSearchWord()
        findImage()
        startexe.executeProcessingSystem()
        readWord()
        iterations = iterations + 1
        time.sleep(2)
        print("============================")


def setSearchWord():
    global iterations
    global searchTerm

    # First time use user input as search term
    if iterations == 1:
        searchTerm = input("Enter the first search word: ")
        while len(searchTerm) <= 0:
            print("Please provide a word...")
            searchTerm = input("Enter the first search word: ")
    # All other iterations, use the word generated
    else:
        searchTerm = newWord

    print("Current search word: \033[33m" + searchTerm)


def findImage(n=1):
    t = time.time()
    flickr = FlickrAPI(key, secret)
    license = ()

    # Find image
    photo = flickr.walk(
        text=searchTerm,
        extras="url_o",
        per_page=500,
        license=license,
        sort="relevance",
    )

    # Loop the results
    for i, photo in enumerate(photo):
        if i < n:
            try:
                # Construct url
                url = photo.get("url_o")  # original size

                if url is None:
                    url = "https://farm%s.staticflickr.com/%s/%s_%s_b.jpg" % (
                        photo.get("farm"),
                        photo.get("server"),
                        photo.get("id"),
                        photo.get("secret"),
                    )

                # Download image
                saveImage(url, searchTerm)

            except OSError as err:
                print("OS error: {0}".format(err))
                # print("%g/%g error..." % (i, n))
        else:
            break

    print("\033[92mImage saved (%.1fs)\033[0m" % (time.time() - t))


def saveImage(url, searchTerm):
    # Save to images folder
    images_path = (
        str(Path(__file__).parent.resolve()) + "\\images\\" + searchTerm + ".jpg"
    )
    urllib.request.urlretrieve(url, images_path)

    # Save to temp_image folder
    temp_image_path = str(Path(__file__).parent.resolve()) + "\\temp_image\\image.jpg"
    urllib.request.urlretrieve(url, temp_image_path)


def readWord():
    path = (
        str(Path(__file__).parent.resolve())
        + "\\processing-system\\executable\\singleWord.txt"
    )
    with open(path) as f:
        global newWord
        newWord = f.read().strip()


if __name__ == "__main__":
    main()
